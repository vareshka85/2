tests

from api import PetFriends
from settings import valid_email, valid_password
import os

pf = PetFriends()


def test_get_api_key_for_valid_user(email=valid_email, password=valid_password):
    status, result = pf.get_api_key(email, password)
    assert status == 200
    assert 'key' in result

def test_get_all_pets_with_valid_key(filter=''):
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.get_list_of_pets(auth_key, filter)
    assert status == 200
    assert len(result['pets']) > 0

def test_post_add_new_pets_with_valid_data(name='Мура', animal_type='британка', age='1', pet_photo='images/кошка.jpg'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.post_add_new_pets(auth_key, name, animal_type, age, pet_photo)
    assert status == 200
    assert result['age'] == age

def test_delete_pet():
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    if len(my_pets['pets']) == 0:
        pf.post.add_new_pet(auth_key, "Суперкот", "кот", "3", "images/cat1.jpg")
        _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")


    pet_id = my_pets['pets'][0]['id']
    status, _ = pf.delete_pet(auth_key, pet_id)

    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    assert status == 200
    assert pet_id not in my_pets.values()

def test_put_update(name='Мак', animal_type='кошка', age=4):
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    if len(my_pets['pets']) > 0:
        status, result = pf.put_update_about_pets(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)
        assert status == 200
        assert result['name'] == name
    else:
        raise Exception("These is no my pets")

def test_post_about_new_pets(name='Мура', animal_type='британка', age='1'):
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.create_pet_simple(auth_key, name, animal_type, age)
    assert status == 200
    assert result['name'] == name
    assert result['animal_type'] == animal_type
    assert result['age'] == age

def test_new_photo(pet_photo='images/кошка.jpg'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    if len(my_pets['pets']) == 0:
        pf.create_pet_simple(auth_key, "Мурзик", "кот", "8")
        _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    pet_id = my_pets['pets'][0]['id']
    status, result = pf.new_photo(auth_key, pet_id, pet_photo)

    assert status == 200
    assert result['pet_photo'] is not ''

def test_pet_name_bag(name='', animal_type='кот', age='4'): # не указать имя при обновлении информации о питомце

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    try:

        if len(my_pets['pets']) > 0:
            status, result = pf.put_update_about_pets(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)
            assert status == 400
        else:
            print('Нет питомцев')
    except AssertionError:
        if status == 200:
            print('Баг - запрос прошел с пустым обязательным параметром')
        else:
            print('Баг на возврат кода ошибки')


def test_get_api_pets_key_bag(filter=''): # строковый ключ некорректен
    auth_key = {'key': 'aaa'}
    status, result = pf.get_list_of_pets(auth_key, filter)
    assert status == 403


def test_new_photo_bag_text(pet_photo='images/cat.txt'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    if len(my_pets['pets']) == 0:
        pf.create_pet_simple(auth_key, "Кот", "кот", "4")
        _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    pet_id = my_pets['pets'][0]['id']
    status, result = pf.new_photo(auth_key, pet_id, pet_photo)
    try:
        assert status == 400
    except AssertionError:
        print('Баг на ошибку текст вместо фото')


def test_get_api_pets_key_bag(filter=''):
    # строковый ключ некорректен более 256 символов
    auth_key = {'key': 'wertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjk\
                       qwertyuiopasdfghjklzxcvbnmpoiuytrewqasdfghjklmnbvcxzasdfghjklpoiuytrewqasd\
                       dfghjklmnbvcxzqwertyuiopasdfghjklzxcvbnmlkjhgfdsaqwertyuioplkjhgfdsazxcvbn\
                       qwertyuioplkjhgfdsazxcvbnmnbvcxzasfg'}
    status, result = pf.get_list_of_pets(auth_key, filter)
    assert status == 403

def test_not_photo_bag(pet_photo=''):

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    if len(my_pets['pets']) == 0:
        pf.create_pet_simple(auth_key, "Сорока", "кошка", "2")
        _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")
    try:
        pet_id = my_pets['pets'][0]['id']
        status, result = pf.new_photo(auth_key, pet_id, pet_photo)

        assert status == 400

    except FileNotFoundError:
        print('Отсутствие файла при добавлении')

def test_pet_name_bag(name='Муська', animal_type='кот', age=''):
    # не указать возраст при обновлении информации о питомце

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    try:

        if len(my_pets['pets']) > 0:
            status, result = pf.put_update_about_pets(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)
            assert status == 400
        else:
            print('Нет питомцев')
    except AssertionError:
        if status == 200:
            print('Баг - запрос прошел с пустым обязательным параметром')
        else:
            print('Баг на возврат кода ошибки')

def test_pet_name_bag(name='Муська', animal_type='', age='6'):
    # не указать тип животного при обновлении информации о питомце

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    try:

        if len(my_pets['pets']) > 0:
            status, result = pf.put_update_about_pets(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)
            assert status == 400
        else:
            print('Нет питомцев')
    except AssertionError:
        if status == 200:
            print('Баг - запрос прошел с пустым обязательным параметром')
        else:
            print('Баг на возврат кода ошибки')

def test_pet_name_bag(name='25845', animal_type='кот', age='4'):
    # указать имя цифрами при обновлении информации о питомце

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    try:

        if len(my_pets['pets']) > 0:
            status, result = pf.put_update_about_pets(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)
            assert status == 400
        else:
            print('Нет питомцев')
    except AssertionError:
        if status == 200:
            print('Баг - запрос прошел с ошибкой в обязательном параметре')
        else:
            print('Баг на возврат кода ошибки')

def test_pet_name_bag_limit(name='wertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjk\
                       qwertyuiopasdfghjklzxcvbnmpoiuytrewqasdfghjklmnbvcxzasdfghjklpoiuytrewqasd\
                       dfghjklmnbvcxzqwertyuiopasdfghjklzxcvbnmlkjhgfdsaqwertyuioplkjhgfdsazxcvbn\
                       qwertyuioplkjhgfdsazxcvbnmnbvcxzasfg', animal_type='кот', age='4'):
    #указать имя более 256 символов при обновлении информации о питомце

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")


    if len(my_pets['pets']) > 0:
        status, result = pf.put_update_about_pets(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)
        assert status == 200
        assert result['name'] == name

    else:
        raise Exception("There is no my pets")





setting


valid_email = "vareshka85@mail.ru"
valid_password = "21041982Tol"


api.py

import requests
import requests_toolbelt
from requests_toolbelt.multipart.encoder import MultipartEncoder
import json

class PetFriends:
    def __init__(self):
        self.base_url = "http://petfriends1.herokuapp.com/"

    def get_api_key(self, email, password):

        headers = {
            'email': email,
            'password': password
        }
        res = requests.get(self.base_url+'api/key', headers=headers)
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except:
            result = res.text
        return status, result

    def get_list_of_pets(self, auth_key, filter):
        headers = {'auth_key': auth_key['key']}
        filter = {'filter': filter}

        res = requests.get(self.base_url+'api/pets', headers=headers, params=filter)
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except:
            result = res.text
        return status, result

    def post_add_new_pets(self, auth_key, name, animal_type, age, pet_photo):

        data = MultipartEncoder(
            fields = {
                'name': name,
                'animal_type': animal_type,
                'age': age,
                'pet_photo': (pet_photo, open(pet_photo, 'rb'),'image/jpeg')
            })
        headers = {'auth_key': auth_key['key'], 'Content-Type': data.content_type}

        res = requests.post(self.base_url + 'api/pets', headers=headers, data=data)
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except:
            result = res.text
        print(result)
        return status, result

    def delete_pet(self, auth_key, pet_id):
        headers = {'auth_key': auth_key['key']}

        res = requests.delete(self.base_url+'api/pets/' + pet_id, headers=headers)
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except:
            result = res.text
        return status, result

    def put_update_about_pets(self, auth_key, pet_id, name, animal_type, age):
        headers = {'auth_key': auth_key['key']}
        data = {
                'name': name,
                'animal_type': animal_type,
                'age': age,
        }

        res = requests.put(self.base_url + 'api/pets/' + pet_id, headers=headers, data=data)
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except:
            result = res.text
        return status, result

    def create_pet_simple(self, auth_key, name, animal_type, age):

        headers = {'auth_key': auth_key['key']}
        data = {
            'name': name,
            'animal_type': animal_type,
            'age': age
        }


        res = requests.post(self.base_url + 'api/create_pet_simple', headers=headers, data=data)
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except:
            result = res.text
        return status, result

    def new_photo(self, auth_key, pet_id, pet_photo):

        data = MultipartEncoder(
            fields={
                'pet_photo': (pet_photo, open(pet_photo, 'rb'), 'image/jpeg')
            })
        headers = {'auth_key': auth_key['key'], 'Content-Type': data.content_type}

        res = requests.post(self.base_url + 'api/pets/set_photo' + pet_id, headers=headers, data=data)
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except:
            result = res.text
        print(result)
        return status, result

